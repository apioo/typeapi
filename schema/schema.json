{
  "$import": {
    "typeschema": "file:///typeschema.json"
  },
  "definitions": {
    "Operations": {
      "description": "A map of operations which are provided by the API. The key of the operation should be a global unique string separated by a dot, we recommend to use the java package naming convention and use your domain reversed as prefix before every operation name",
      "type": "object",
      "additionalProperties": {
        "$ref": "Operation"
      }
    },
    "Operation": {
      "type": "object",
      "properties": {
        "method": {
          "description": "The HTTP method which is associated with this operation, must be a valid HTTP method i.e. GET, POST, PUT etc.",
          "type": "string"
        },
        "path": {
          "description": "The HTTP path which is associated with this operation. A path can also include variable path fragments i.e. /my/path/:year then you can map the variable year path fragment to a specific argument",
          "type": "string"
        },
        "return": {
          "description": "The return type of this operation. The return has also an assigned HTTP success status code which is by default 200",
          "$ref": "Return"
        },
        "arguments": {
          "description": "All arguments provided to this operation. Each argument is mapped to a location from the HTTP request",
          "$ref": "Arguments"
        },
        "throws": {
          "description": "All exceptional states which can occur in case the operation fails. Each exception is also assigned to an HTTP error status code",
          "type": "array",
          "items": {
            "$ref": "Throw"
          }
        },
        "description": {
          "description": "A short description of this operation. The generated code will include this description at the method so it is recommend to use simple alphanumeric characters and no new lines",
          "type": "string"
        },
        "stability": {
          "description": "Indicates the stability of this operation. This is based on the stability index from the nodejs project: 0 - Deprecated, 1 - Experimental, 2 - Stable, 3 - Legacy. If not explicit provided the operation is by default experimental.",
          "type": "integer",
          "enum": [0, 1, 2, 3],
          "default": 1
        },
        "security": {
          "description": "An array of scopes which are required to access this operation",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "authorization": {
          "description": "Indicates whether this operation needs authorization, if set to false the client will not send an authorization header, default it is true",
          "type": "boolean",
          "default": true
        },
        "tags": {
          "description": "Optional an array of tags to group operations. Those tags are used at the client generator to group operations",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Arguments": {
      "description": "Contains a map of arguments. The key will be used as variable name at the generated code so it is recommended to use only a-z and underscore as characters",
      "type": "object",
      "additionalProperties": {
        "$ref": "Argument"
      }
    },
    "Argument": {
      "type": "object",
      "properties": {
        "in": {
          "description": "The location where the value can be found either in the path, query or body. If you choose path, then your path must have a fitting variable path fragment",
          "type": "string",
          "enum": ["path", "query", "body"]
        },
        "schema": {
          "oneOf": [
            {
              "$ref": "typeschema:BooleanType"
            },
            {
              "$ref": "typeschema:NumberType"
            },
            {
              "$ref": "typeschema:IntegerType"
            },
            {
              "$ref": "typeschema:StringType"
            },
            {
              "$ref": "typeschema:ReferenceType"
            }
          ]
        }
      }
    },
    "Return": {
      "type": "object",
      "properties": {
        "code": {
          "description": "The associated HTTP response code",
          "type": "integer",
          "default": 200
        },
        "schema": {
          "$ref": "typeschema:ReferenceType"
        }
      }
    },
    "Throw": {
      "type": "object",
      "properties": {
        "code": {
          "description": "The associated HTTP response code",
          "type": "integer",
          "default": 500
        },
        "schema": {
          "$ref": "typeschema:ReferenceType"
        }
      }
    },
    "Security": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["httpBasic", "httpBearer", "apiKey", "oauth2"]
        }
      }
    },
    "SecurityHttpBasic": {
      "description": "Describes that the API requires an HTTP Basic authentication, the user needs to provide a username and password at the client",
      "$extends": "Security"
    },
    "SecurityHttpBearer": {
      "description": "Describes that the API requires an HTTP Bearer authentication, the user needs to provide an access token, how the user obtains this access token is out-of-bound of this specification",
      "$extends": "Security"
    },
    "SecurityApiKey": {
      "description": "Describes that the API requires an Api-Key authentication, the user needs to provide a token and the client will place this token at the describes header or query parameter",
      "$extends": "Security",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string"
        }
      }
    },
    "SecurityOAuth2": {
      "description": "Describes that the API requires an OAuth2 authentication, the user needs to provide a client id and secret, then the client tries to automatically obtain an access token using the client credentials grant",
      "$extends": "Security",
      "type": "object",
      "properties": {
        "tokenUrl": {
          "type": "string"
        },
        "authorizationUrl": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TypeApi": {
      "description": "The root TypeApi",
      "type": "object",
      "properties": {
        "$import": {
          "$ref": "typeschema:Import"
        },
        "security": {
          "oneOf": [{
            "$ref": "SecurityHttpBasic"
          }, {
            "$ref": "SecurityHttpBearer"
          }, {
            "$ref": "SecurityApiKey"
          }, {
            "$ref": "SecurityOAuth2"
          }],
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "httpBasic": "SecurityHttpBasic",
              "httpBearer": "SecurityHttpBearer",
              "apiKey": "SecurityApiKey",
              "oauth2": "SecurityOAuth2"
            }
          }
        },
        "operations": {
          "$ref": "Operations"
        },
        "definitions": {
          "$ref": "typeschema:Definitions"
        }
      }
    }
  },
  "$ref": "TypeSchema"
}
